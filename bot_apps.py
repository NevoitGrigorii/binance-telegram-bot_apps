import os
import logging
import nest_asyncio
import asyncio

from flask import Flask
from asgiref.wsgi import WsgiToAsgi  # –î–ª—è –∑–∞–ø—É—Å–∫—É Flask —á–µ—Ä–µ–∑ ASGI
from telegram import Update, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
WEB_APP_URL = os.environ.get("WEB_APP_URL")
PORT = int(os.environ.get("PORT", 8080))

if not TELEGRAM_TOKEN or not WEB_APP_URL:
    raise ValueError("TELEGRAM_TOKEN —Ç–∞ WEB_APP_URL –º–∞—é—Ç—å –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ!")

# --- –õ–æ–≥–∏ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü—ñ—ó Telegram-–±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    button = KeyboardButton(
        "üìà –í—ñ–¥–∫—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫",
        web_app=WebAppInfo(url=WEB_APP_URL)
    )
    keyboard = [[button]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.",
        reply_markup=reply_markup
    )

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram Application ---
ptb_app = Application.builder().token(TELEGRAM_TOKEN).build()
ptb_app.add_handler(CommandHandler("start", start))

# --- Flask —á–∞—Å—Ç–∏–Ω–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É ---
_flask_app = Flask(__name__, static_folder='frontend', static_url_path='')


@_flask_app.route('/')
def index():
    return _flask_app.send_static_file('index.html')


# Wrap Flask —É ASGI
flask_app = WsgiToAsgi(_flask_app)

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É ---
def main():
    # –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è event loop (Render/Production —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ)
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()

    import uvicorn

    # --- –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä—É —è–∫ —Ç–∞—Å–∫ ---
    flask_task = loop.create_task(
        uvicorn.run(
            "bot_apps:flask_app",
            host="0.0.0.0",
            port=PORT,
            log_level="info",
            loop=loop,
        )
    )

    # --- –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ---
    bot_task = loop.create_task(ptb_app.run_polling(close_loop=False))

    # --- –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±–æ—Ö —Ç–∞—Å–∫—ñ–≤ ---
    loop.run_until_complete(asyncio.gather(flask_task, bot_task))


if __name__ == "__main__":
    main()
